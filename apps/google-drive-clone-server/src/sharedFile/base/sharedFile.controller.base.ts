/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SharedFileService } from "../sharedFile.service";
import { SharedFileCreateInput } from "./SharedFileCreateInput";
import { SharedFile } from "./SharedFile";
import { SharedFileFindManyArgs } from "./SharedFileFindManyArgs";
import { SharedFileWhereUniqueInput } from "./SharedFileWhereUniqueInput";
import { SharedFileUpdateInput } from "./SharedFileUpdateInput";

export class SharedFileControllerBase {
  constructor(protected readonly service: SharedFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SharedFile })
  async createSharedFile(
    @common.Body() data: SharedFileCreateInput
  ): Promise<SharedFile> {
    return await this.service.createSharedFile({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SharedFile] })
  @ApiNestedQuery(SharedFileFindManyArgs)
  async sharedFiles(@common.Req() request: Request): Promise<SharedFile[]> {
    const args = plainToClass(SharedFileFindManyArgs, request.query);
    return this.service.sharedFiles({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SharedFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sharedFile(
    @common.Param() params: SharedFileWhereUniqueInput
  ): Promise<SharedFile | null> {
    const result = await this.service.sharedFile({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SharedFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSharedFile(
    @common.Param() params: SharedFileWhereUniqueInput,
    @common.Body() data: SharedFileUpdateInput
  ): Promise<SharedFile | null> {
    try {
      return await this.service.updateSharedFile({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SharedFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSharedFile(
    @common.Param() params: SharedFileWhereUniqueInput
  ): Promise<SharedFile | null> {
    try {
      return await this.service.deleteSharedFile({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
